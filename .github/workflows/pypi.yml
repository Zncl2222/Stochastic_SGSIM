# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    tags:
      - '*'
  release:
    types: [published]

jobs:
  build_shared_library:
    strategy:
      matrix:
        runs-on: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Pull Submodule
        run: git submodule update --init --recursive
      - name: Build DLL & Set file name windows
        if: matrix.runs-on == 'windows-latest'
        shell: pwsh
        run: |
          .\cmake_build.bat -s
          echo "filename=uc_sgsim.dll" >> $env:GITHUB_ENV
      - name: Build Shared Library & Set file name ubuntu
        if: matrix.runs-on == 'ubuntu-latest'
        run: |
          sh ./cmake_build.sh -s
          echo "filename=uc_sgsim.so" >> "$GITHUB_ENV"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runs-on }}-shared-library
          path: ./uc_sgsim/c_core/${{ env.filename }}

  test-release:
    runs-on: ubuntu-latest
    needs: [build_shared_library]
    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - run: |
          mv ./uc_sgsim.dll ./uc_sgsim/c_core
          mv ./uc_sgsim.so  ./uc_sgsim/c_core
      - name: Build package
        run: python -m build
      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  release-job:
    runs-on: ubuntu-latest
    needs: [build_shared_library]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - run: |
          mv ./uc_sgsim.dll ./uc_sgsim/c_core
          mv ./uc_sgsim.so  ./uc_sgsim/c_core
      - name: Build package
        run: python -m build
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
