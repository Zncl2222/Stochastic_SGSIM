name: Unit test and sonar analysis

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_shared_library:
    strategy:
      matrix:
        runs-on: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Build DLL & Set file name windows
        if: matrix.runs-on == 'windows-latest'
        shell: pwsh
        run: |
          .\cmake_build.bat -s
          echo "filename=uc_sgsim.dll" >> $env:GITHUB_ENV
      - name: Build Shared Library & Set file name ubuntu
        if: matrix.runs-on == 'ubuntu-latest'
        run: |
          sh ./cmake_build.sh -s
          echo "filename=uc_sgsim.so" >> "$GITHUB_ENV"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runs-on }}-shared-library
          path: ./uc_sgsim/c_core/${{ env.filename }}

  python_test:
    name: py-unittest
    runs-on: ubuntu-latest
    needs: build_shared_library
    strategy:
      max-parallel: 5
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sed -i '/^[^#]/s/==.*//' requirements.txt
          python -m pip install --upgrade pip
          if [ -f requirements.txt ];
          then pip install -r requirements.txt;
          fi
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - run: |
          mv ./uc_sgsim.so ./uc_sgsim/c_core
      - name: Run tests to generate coverage statistics
        run: |
          pytest -n auto --cov --cov-report xml:py_coverage.xml
      - uses: actions/upload-artifact@v4
        if: matrix.python-version  == '3.11'
        with:
          name: python-coverage
          path: ./py_coverage.xml

  python_test_windows:
    name: py-unittest-windows
    runs-on: windows-latest
    needs: build_shared_library
    strategy:
      max-parallel: 5
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          if (Test-Path requirements.txt) {
            pip install --upgrade pip
            pip install -r requirements.txt
          }
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - run: |
          mv ./uc_sgsim.dll ./uc_sgsim/c_core
      - name: Run tests to generate coverage statistics
        run: |
          pytest -n auto --cov --cov-report xml:py_coverage.xml

  c_test:
    name: c-unittest
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python 3.8 for gcovr
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: install gcovr 5.0
        run: |
          pip install gcovr==5.0 # 5.1 is not supported
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run tests to generate coverage statistics
        run: |
          cd build
          ./c_example.out
          ./test/unittest
          cd ..
      - name: Install LCOV
        shell: bash
        run: |
          sudo apt-get --assume-yes install lcov > /dev/null
      - name: lcov collection
        shell: bash
        run: |
          cd build
          lcov -c -d . -o cover.info
          cd ..
      - name: Collect coverage into one XML report
        run: |
          gcovr --sonarqube > c_coverage.xml

      - uses: actions/upload-artifact@v4
        with:
          name: c-coverage
          path: |
            ./c_coverage.xml
      - uses: actions/upload-artifact@v4
        with:
          name: c-coverage2
          path: |
            ./build/cover.info

  c_test_windows:
    name: c-unittest-windows
    runs-on: windows-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: build and test
        run: |
          .\cmake_build.bat

  python_scan:
    name: SonarCloud-py
    runs-on: ubuntu-latest
    needs: [python_test]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Run sonar-scanner
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=zncl2222_Stochastic_UC_SGSIM_py
            -Dsonar.organization=zncl2222
            -Dsonar.projectName=Stochastic_UC_SGSIM_py
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=uc_sgsim/
            -Dsonar.exclusions=uc_sgsim/c_core/**
            -Dsonar.python.coverage.reportPaths=python-coverage/py_coverage.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_PY }} # Put the name of your token here
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: py_coverage.xml

  c_scan:
    name: SonarCloud-c
    runs-on: ubuntu-latest
    needs: [c_test]
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_C }} # Put the name of your token here
        run: |
          sonar-scanner --define sonar.projectKey=zncl2222_Stochastic_UC_SGSIM_c \
                        --define sonar.organization=zncl2222 \
                        --define sonar.projectName=Stochastic_UC_SGSIM_c \
                        --define sonar.projectVersion=1.0 \
                        --define sonar.sources=uc_sgsim/c_core/src/ \
                        --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
                        --define sonar.coverageReportPaths=c-coverage/c_coverage.xml \
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: c-coverage2/cover.info
